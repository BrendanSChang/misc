set nocompatible

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" Look and feel
Plug 'altercation/vim-colors-solarized'
Plug 'tomasr/molokai'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Source tree
Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'

" Error checking
" Plug 'vim-syntastic/syntastic'
Plug 'w0rp/ale'

" Tagging/symbols
Plug 'xolox/vim-misc'
Plug 'xolox/vim-easytags'
Plug 'majutsushi/tagbar'

" File search
" <C-p> to search, enter to open file or <C-t> to open in a new tab
" Plug 'ctrlpvim/ctrlp.vim'
Plug 'junegunn/fzf', {'dir': '~/.fzf', 'do': './install --all'}
Plug 'junegunn/fzf.vim'

" Automatically open corresponding header/source file with :AT
Plug 'vim-scripts/a.vim'

" Git plugins
Plug 'mhinz/vim-signify'
" Check out repository for aliases
Plug 'tpope/vim-fugitive'

" Automatically create matching delimiters
Plug 'Raimondi/delimitMate'

" Load man-pages with vim
" Plug 'jez/vim-superman'

" tmux window switching
Plug 'christoomey/vim-tmux-navigator'

" Syntax plugins
Plug 'sheerun/vim-polyglot'

" Highlight and clear trailing whitespace
Plug 'ntpeters/vim-better-whitespace'

" Make tmux look like vim-airline
Plug 'edkolev/tmuxline.vim'

" Code commenting
Plug 'tpope/vim-commentary'

" Code completion
" This may cause vim to be slow...
Plug 'Valloric/YouCompleteMe', { 'do': './install.py --clang-completer' }

call plug#end()

" General Settings
set backspace=indent,eol,start
set ruler
set number
set expandtab
set softtabstop=4
set tabstop=4
set shiftwidth=4
set autoindent
set number
set showcmd
set colorcolumn=80
set incsearch
set hlsearch

nnoremap <silent> <leader>] :nohl<CR><leader>]
inoremap ;l <Esc>`^

autocmd Filetype cpp setlocal softtabstop=2 tabstop=2 shiftwidth=2

autocmd BufReadPre *SConscript set syntax=python
autocmd BufReadPre *SConstruct set syntax=python

set mouse=a

hi clear SignColumn

set t_Co=16
syntax on

" Plugin Settings

" altercation/vim-colors-solarized
" Set to "light" for light colorscheme
set background=dark

" let g:solarized_termcolors=256
colorscheme solarized

" bling/vim-airline
" Always show status bar
set laststatus=2
" Fancy arrow symbols
let g:airline_powerline_fonts=1
" Show PASTE if in paste mode
let g:airline_detect_paste=1
" Show airline for tabs too
let g:airline#extensions#tabline#enabled=1
" Use solarized theme for status bar
let g:airline_theme='solarized'

" jistr/vim-nerdtree-labs
" Toggle NERDTree with \t
nmap <silent> <leader>t :NERDTreeTabsToggle<CR>
" Always have NERDTree open on startup
let g:nerdtree_tabs_open_on_console_startup=1

" scrooloose/syntastic
" let g:syntastic_error_symbol='✘'
" let g:syntastic_warning_symbol='▲'
" augroup mySyntastic
"     au!
"     au FileType tex let b:syntastic_mode="passive"
" augroup END
" Automatically populate errors in location list
" Navigate errors by :lnext and :lprev
"let g:syntastic_always_populate_loc_list=1
"let g:syntastic_auto_loc_list=1
" Check for errors on open instead of close
" let g:syntastic_check_on_open=1
" let g:syntastic_check_on_wq=0

" w0rp/ale
let g:ale_sign_error='✘'
let g:ale_sign_warning='▲'
highlight clear ALEErrorSign
highlight clear ALEWarningSign
" let g:ale_lint_on_text_changed='never'

" xolox/vim-easytags
" Where to find tags
set tags=./tags;,~/.vimtags
" Defaults
let g:easytags_events=['BufReadPost', 'BufWritePost']
let g:easytags_async=1
let g:easytags_dynamic_files=2
let g:easytags_resolve_links=1
let g:easytags_supporess_ctags_warning=1

" majutsushi/tagbar
" Toggle tagbar with \b
nmap <silent> <leader>b :TagbarToggle<CR>
" Uncomment to open tagbar automatically whenever possible
"autocmd BufEnter * nested :call tagbar#autoopen(0)

" ctrlpvim/ctrlp
" junegunn/fzf
" Use ripgrep if available
" --column: Show column number
" --line-number: Show line number
" --no-heading: Do not show file headings in results
" --fixed-strings: Search term as a literal string
" --ignore-case: Case insensitive search
" --no-ignore: Do not respect .gitignore, etc...
" --hidden: Search hidden files and folders
" --follow: Follow symlinks
" --glob: Additional conditions for search (in this case ignore everything in the .git/ folder)
" --color: Search color options
if executable('rg')
"     set grepprg=rg\ --color=never
    set grepprg=rg\ --vimgrep
"     let g:ctrlp_user_command='rg %s --files --color=never --glob ""'
"     let g:ctrlp_use_caching=0
    command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)
endif

" Don't search these files
set wildignore+=*/.git/*,*/.svn/*,*/tmp/*,*.swp

" mhinz/vim-signify
" In vim-airline, only display "hunks" if the diff is non-zero
let g:airline#extensions#hunks#non_zero_only=1
let g:signify_vcs_list=['git','svn']

" Raimondi/delimitMate
let delimitMate_expand_Cr=1
augroup mydelimitMate
    au!
    au FileType markdown let b:delimitMate_nesting_quotes=["`"]
    au FileType tex let b:delimitMate_quotes=""
    au FileType tex let b:delimitMate_matchpairs="(:),[:],{:},`:'"
    au FileType python let b:delimitMate_nesting_quotes=['"',"'"]
augroup END

" ntpeters/vim-better-whitespace
" Strip whitespace on save
"autocmd BufEnter * EnableStripWhitespaceOnSave
" Strip whitespace with \-
nmap <silent> <leader>- :StripWhitespace<CR>
